# Grafický výstup {#sec-grafy}

::: callout-warning
## Cíle cvičení

  - Naučit se tvorbu základních typů grafů.
  - Definovat rozdělení sazby výstupu do polí.
  - Uložit výstupy do souboru.
:::

V R dnes existují dva rúzné systémy pro tvorbu diagramů. První je obsažen v balíčku
`base` a druhý staví na funkcionalitě obsažené v `grid`. V tomto kurzu budeme pracovat
s `base`.

Opět připravíme datovou sadu, tentokrát umístíme do `data.frame` jménem `dfr`.

```{r}
dfr <- data.frame(
  X = 1:100,
  Y = rnorm(100) # <1>
)
```
1. K vytvoření proměnné $Y$ použijeme generování čísel z náhodného rozdělení s parametry $\mu = 0$ a $\sigma = 1$; více v @sec-rozdeleni. Velká písmena jsou zvolena pro odlišnost od argumentů funkce.


::: callout-tip
## Úloha

1.  a) Zadejte do konzole `demo(graphics)` a projeďte až na konec ukázky. Potom vyčistěte
       panely **Environment**, **Plots** a **Console**. \
    b) Pročtěte si nápovědu `?par`
:::

## Jednorozměrná data

Jednorozměrná data nejčastěji kreslíme pomocí **boxplotu**, **histogramu** a **sloupcového grafu**.


```{r ,fig.align='center', fig.width=10}

par(mfrow = c(1, 3)) #<1>
boxplot(dfr$Y) #<2>
hist(dfr$Y) #<2>
barplot(dfr$Y) #<2>
```
1. Rozdělení grafického okna na tři sloupce (viz níže).
2. Funkce pro jednorozměrné grafy v základní parametrizaci. 

::: callout-tip
## Úloha

2.  a) Podívejte se na oba krajní grafy předchozího výstupu a popište, rozdíl mezi
       histogramem a sloupcovým grafem.
    b) Podívejte se do nápovědy k funkci `hist()` a doplňte následující kód tak, 
       aby koše měly hranice od $-4$ do $4$ s krokem $0,5$.
`hist(dfr$Y, breaks =` `r fitb("seq(from = -4, to = 4, by = 0.5)")` `)`
:::

## Funkce `curve()`

Curve je funkce, která se uplatní při tvorbě symbolických grafů matematických funkcí, kdy není třeba parametrizovat argument `x`. 
Další argumenty `?par` jsou stejné jako u `plot()`.

```{r, fig.align='center'}
curve(expr = tanh(x),
      from = -pi, 
      to = pi)
curve(expr = tanh(2*x),
      from = -pi, 
      to = pi, 
      add = TRUE)
```

## Funkce `plot()`

`plot(x, y, ...)` je základní **S3 generická** funkce, jejíž metody umožňují použití na široké množství objektů.
Začneme s použitím na vektor z datasetu `dfr`.

```{r, fig.align='center'}
plot(dfr$X, dfr$Y) # <1> 
```
1. Funkce má věšinu svých argumentů parametrizovaných v přednastavenými hodnotami, nebo hodnotami novodvozenými od parametru. Vidíme tak, že osa $y$ je pojmenována po vstupním parametru.

Zkusíme více parametrizovat výstup a 

```{r, fig.align='center'}
plot(x = dfr$X, # <1>
     y = dfr$Y, # <1>
     type = "b", # <2>
     col = "gray10", # <3>
     pch = 21, # <4>
     bg = "#4a6777", # <5>
     ylim = c(-abs(1.25 * min(dfr$Y)), # <6>
              1.25 * max(dfr$Y)), # <6>
     xlab = "", # <7>
     ylab = "Value", # <7>
     main = "Y~X vztah",  # <8>
     sub = Sys.Date()) # <9>
legend(x = "topright", # <10> 
       fill = "#4a6777", # <11>
       pch = 21, # <12>
       legend = c("Y"), # <13> 
       box.col = NA, # <14>
       lty = 1, # <15>
       col = "gray10") # <16>
```
1. Základní proměnné $X$ a $Y$ pro typ grafu.
2. Volba typu grafu `"b"` označuje body protnuté spojnicí.
3. Volba barvy popředí znaku bod/přímka.
4. Volba charakteru bodového znaku.
5. Volba barvy pozadí znaku umožňujícího výplň - bod.
6. Změna rozsahu osy $y$.
7. Změna názvu os.
8. Znění hlavního nadpisu.
9. Podnadpis *dtto*.
10. Pokračujeme nastavením umístění legendy.
11. Výplň prvku v legendě.
12. Typ prvku v legendě.
13. Název prvku v legendě.
14. Volba barvy ohraničení legendy
15. Volba typu spojnice (1 = plná čára)
16. Volba barvy popředí prvku legendy


U funkcí, do kterých vstupuje více proměnných z jednoho datasetu je možné z důvodu 
přehledonosti použít obalovací funkci `with()`, s níž pak není třeba provádět opakovaně
podvýběr.

```{r, fig.align='center'}
with(data = dfr, # <1>
     expr = { # <2>
       plot(x = X, y = Y)  # <2>
       lines(x = X, y = Y) # <2>
       }# <2>
     ) 
```
1. Funkce `with()` umožňuje zavolání funkce uvedené v arugmentu `expr` na proměnných v `data.frame`. Odpadá opakované psaní prefixu datové sady (zde `dfr$___`)
2. Argument `expr` může obsahovat i blok kódu `{...}`, jako je tomu v tomto případě.



<!-- ### Transformace souřadnic -->

<!-- S polárními souřadnicemi se setkáváme poměrně často.  -->

<!-- Polární souřadnice -->
<!-- $$ -->
<!-- \begin{array}{rl} -->
<!-- x =& \sqrt{t}\cdot\cos(2\pi t)\\ -->
<!-- y =& \sqrt{t}\cdot\sin(2\pi t) -->
<!-- \end{array} -->
<!-- $$ -->

<!-- ```{r} -->
<!-- x <- sqrt -->
<!-- ``` -->


## Volba barev

Barvy je možné aplikovat na všechny prvrky grafu. Buď je možné psát barvy dle názvů,
například `"white"`, `"orange"` použít funkci `rgb()` a nebo hexadecimální zápis `"#FFF000"`.
Výpis všech předdefinovaných barev[^03_grafy-1] lze získat příkazem `colors()`.

[^03_grafy-1]: Předdefinovaných barev je celkem 657.

```{r}
colors()[1:10]
```

### Palety a `RColorBrewer`

Součástí základní sady je sada palet a balík `RColorBrewer`.

```{r, fig.align='center'}
#| fig-width: 10
#| fig-height: 8
RColorBrewer::display.brewer.all()
```

K vytvoření palety (vektoru) barev pak žádáme $n$ barev z předdefinovaného jmenného rozsahu.

```{r}
RColorBrewer::brewer.pal(n = 100, name = "RdBu")
rbind(
  rainbow = rainbow(10),
  heat.colors = heat.colors(10),
  cm.colors = cm.colors(10),
  blues9
)
```


```{r}
palette.pals()
palette.colors(palette = "Okabe-Ito")
```

```{r}
fcol <- colorRampPalette(colors = c("black", "white"))
palette("Classic Tableau")
```


::: callout-note
## Poznámka

Správná volba barev v grafech odborných publikací je velmi důležitá. V ideálním 
případě by grafické škály měly být stejné čitelné jak pro lidi s poruchou barevného
spektra, tak v černobílem tisku. Obojí je řešeno například pomocí balíčku `scico` @pedersen2021package. 
Ve zkratce je problematika vysvětlena  například ve [vignette](https://cran.r-project.org/web/packages/viridis/vignettes/intro-to-viridis.html) balíčku `viridis`.
:::

::: callout-tip
## Úloha

3.  následujícím příkladu vytvoříte graf **Budykovy křivky**. \
Postup:\
    a) Nahrajte do prostředí data ze souboru **./data/budyko_dfr**.\           
    b) Začněte tvorbu grafu s funkcí `plot.new()`\           
    c) Nejjednodušší vztah popsal Schreiber v roce 1902\           
$$
  \dfrac{\textrm{Ea}}{\textrm{P}_a} = 1-\exp(-\phi)
$$
    d) Vytvořte posloupnost \phi od $0$ do $2$ s krokem $10e^{-3}$ a uložte do proměnné `phi`.\
    e) Pro posloupnost `phi` spočítejte Schreiberovu rovnici a uložte do `schreiber`.
    g) S pomocí následujícího příkazu vytvořte barevné schéma `paleta <- rev(rainbow(20, start = 0, end = 0.6))`
    h) Vyneste body `x = budyko_dfr$PET_over_P` a `y = ET_over_P`.
    i) Nastavte `xlab = "Ep/P"`, `ylab = "P/Er"`, `xlim` v rozsahu $\phi$ a `ylim` od $0$ do $1,2$.\           
    j) Vyneste do plotu liniové segmenty $(0;0)$ -- $(1;1)$ a $(1;1)$ -- $(2;1)$.
    k) Funkcí `grid()` přidejte tečkovanou mřížku.
    
  
  Pokuste se výsledkem přiblížit následovnému grafu, použijte nápovědy:
```{r, echo=FALSE, fig.align='center'}
budyko_dfr <- readRDS("./data/budyko_dfr.rds")
phi <- seq(0, 2, 10e-3)
schreiber <- 1 - exp(-phi)
paleta <- rev(rainbow(20, start = 0, end = 0.6))

plot(x = phi, 
     xlab = "Ep/P", 
     ylab = "P/Er", 
     xlim = c(0, 2), 
     ylim = c(0, 1.2), 
     # bty = "n",
     type = "n", 
     xaxt = "n",
     yaxt = "n"
)

points(x = budyko_dfr$PET_over_P, 
     y = budyko_dfr$ET_over_P,
     xlim = c(0, 2), 
     ylim = c(0, 1), 
     xlab = "PET/P", 
     ylab = "ET/P",
     pch = 21, 
     bg = paleta[round(10*budyko_dfr$PET_over_P)])

# Add grid lines similar to gnuplot
grid(nx = 4, 
     ny = NULL, 
     col = "gray", 
     lty = "dotted", 
     lwd = 1)

# Ensure the plot has a gnuplot-like minimalist style
box(col = NA)  # Remove the box around the plot
axis(1, 
      col = "black", 
      col.ticks = "black", 
      lwd.ticks = 1, 
      lwd = 1, 
      las = 1, 
      tck = -0.02)  # X-axis
axis(2, 
     col = "black", 
     col.ticks = "black", 
     lwd.ticks = 1, 
     lwd = 1, 
     las = 1, 
     tck = -0.02)  # Y-axis

lines(x = phi, 
      y = schreiber, lty = 3, lwd = 2.5)
segments(x0 = 0, x1 = 1, y0 = 0, y1 = 1, lwd = 2, col = "gray60")
segments(x0 = 1, x1 = 2, y0 = 1, y1 = 1, lwd = 2, col = "gray60")
```
:::



## Matematická sazba v grafech

Dá se použít v místě textu, nadpisu nebo jiného popisku.

`?plotmath`
demo(plotmath)

```{r}
plot(x = dfr$X, 
     y = dfr$X^2, 
     main = expression(paste("graf ", y == x^2)), 
     ylab = expression(paste(y == x^2)))
```


## Layout

Jednoduchý pravidelný layout můžeme vytvořit změnou parametrů okna grafického výstupu pomocí funkce `par()`

### Sazba pomocí `par()`

```{r,fig.align='center'}
par(mfrow = c(1, 2)) #<1>
hist(dfr$X, main = "X", xlab = "") # <2>
hist(dfr$Y, main = "Y", xlab = "") # <2>
```
1. Okno výstupu rozdělíme do dvou sloupců na jednom řádku.
2. Posléze voláme dva grafy, které postupně vyplní pole v daném okně.

### Sazba do matice s funkcí `layout()`

```{r,fig.align='center'}
par(cex = 2)
layout.show(
  layout(
    mat = matrix(
      data = c(2, 2, 0, #<1>
               1, 1, 3, #<1>
               1, 1, 3), #<1>
      nrow = 3, 
      ncol = 3, 
      byrow = TRUE))
)
```
1. Zde sdělujeme, že celkově bude pole rozděleno v poměru $3\times 3$ a $4\over9$ 
(levá dolní část) vyplní 1. graf.

Nyní vynecháme `layout.show()`, zavolámem jen layout() a postupně přiřadíme grafy 
k jednotlivým polím.

```{r}
layout(
    mat = matrix(
      data = c(2, 2, 0,
               1, 1, 3,
               1, 1, 3), 
      nrow = 3, 
      ncol = 3, 
      byrow = TRUE))
```

::: callout-tip
## Úloha

4. Vytvořte layout dle následujícího nákresu a vyplňte libovolnými rúznými typy grafů.
```{r, echo=FALSE, fig.align='center'}
layout.show(layout(mat = matrix(c(0, 1, 1,
                                2, 2, 3), nrow = 2, byrow = TRUE)))
```

:::

## Uložení do souboru

Grafy je možné uložit externě, at už prostřednictvím dialogu v ***Plots*** > ***Export***,
nebo přímo ve skriptu. Formát lze volit mezi rastrovými \*.png, \*.jpeg, \*.tiff, \*.bmp, 
či vektorovými \*.eps, \*.svg, \*.pdf. 

```{r, eval=FALSE}
png("./budyko_kompozit.png", 
    width = 8, 
    height = 6, 
    units = "px", 
    res = 300)
...  #<1>
dev.off()
```
1. Standardním způsobem vytvořený diagram či layout.

::: callout-tip
## Úloha

5.  a) Vytvořte poslouponost `t <- seq(from = 2010, to = 2020, length = 200))` a potom
       do stejného grafu vyneste $\sin(2\pi(t - 1))$ a $\cos^2(2\pi t)$.
    b) Vytvořte layout ze 4. úlohy a uložte předchozí graf a dva další do souboru s pomocí funkce `pdf()`. Využijte naápovědy.
:::
