[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Metody vyhodnocování vodohospodářských dat",
    "section": "",
    "text": "1 Úvodem\nNa těchto stránkách se nachází průvodce ke cvičením z kurzu ZVZ117E Metody vyhodnocování vodohospodářských dat, vyuřovaném na Fakultě životního prostředí České zemědělské univerzity. Jeho obsahem jsou materiály ke všem cvičením spolu se zkrácenou teoretickou částí. Text nemá za ambici komplexní teoretický výklad látky - nenahrazuje ani přednášky ani skripta. Jedná se o průvodce cvičeními, nicméně pro potřeby cvičení teorii ve zkrácené podobě připomene.\nVzhledem k tomu, že je tento text orientován na osvojení základních postupů při statistickém zpracování dat, jednotlivé postupy jsou voleny jako nejjednodušší možné. Obecně tedy platí, že veškeré úkony jsou prováděny se zvoleným didaktickým cílem, který je vytyčen na začátku každého cvičení. Tentýž kód je často možné zapsat elegantněji, nebo efektivněji s pomocí pokročilejších nástrojů, na jejichž existenci je čtenář občas doplňkově upozorněn."
  },
  {
    "objectID": "index.html#doporučená-literatura",
    "href": "index.html#doporučená-literatura",
    "title": "Metody vyhodnocování vodohospodářských dat",
    "section": "1.1 Doporučená literatura",
    "text": "1.1 Doporučená literatura\nPopisná statistiky je v cvičena v rozsahu textu Puš (2007) a Jarušková (2006) obsahuje úvod do matematické statistiky.\nK jazyku R je\n\n\n\n\nJarušková, Daniela. 2006. Pravděpodobnost a matematická statistika. Česká technika-nakladatelství ČVUT.\n\n\nPuš, Vladimír. 2007. Popisná statistika. Česká zemědělská univerizita v Praze."
  },
  {
    "objectID": "intro.html#typografické-konvence",
    "href": "intro.html#typografické-konvence",
    "title": "2  Organizace textu",
    "section": "2.1 Typografické konvence",
    "text": "2.1 Typografické konvence\nZdrojový kód v textu je barevně odlišen a jednotlivé úkony jsou v kódu doprovozeny číslovanými komentáři v kroužku, které se aktivují najetím kurzoru myši. V případě, že zdrojový kód obsahuje pouze jeden výraz k vyhodnocení, je vždy výstup uveden přímo pod ním.\n\n\nKód\n1cat(\"Příklad výrazu a jeho vyhodnocení\")\n\n\n\n1\n\nToto je komentář.\n\n\n\n\nPříklad výrazu a jeho vyhodnocení\n\n\nNěkdy je nutné provést vyhodnocení více po sobě jdoucích výrazů a text byl zbytečně nafukován. V takovém případě je výstup zachován přímo v okně zdrojového kódu a je uvozen dvěma po sobě jdoucími znaky \\(\\#\\#\\).\n\n\nKód\n1mean(1:10)\nmedian(1:10)\nsd(1:10)\n## [1] 5.5\n## [1] 5.5\n## [1] 3.02765\n\n\n\n1\n\nSjednocené výstupy v bloku kódu.\n\n\n\n\nPokud se kód nachází uvnitř textu, je opět barevně odlišen a vysázen neproporcionálním písmem. Přičemž funkce je vždy uvedena s příslušnými závorkami a text, který je v kódu navíc, je vždy ohraničen znaky \\(&lt;\\) a \\(&gt;\\). Příkladem budiž mean(x = &lt;vektor čísel&gt;)."
  },
  {
    "objectID": "intro.html#data",
    "href": "intro.html#data",
    "title": "2  Organizace textu",
    "section": "2.2 Data",
    "text": "2.2 Data\n\nPřehled datových sad ke cvičením.\n\n\nKapitola\n\nPopis\nCitace\n\n\n\n\nKapitola 2 - Úloha 4b\n\nVšelibice, úhrn z manuálního srážkoměru"
  },
  {
    "objectID": "intro.html#verze-textu",
    "href": "intro.html#verze-textu",
    "title": "2  Organizace textu",
    "section": "2.3 Verze textu",
    "text": "2.3 Verze textu\nTento text byl vytvořen s pomocí verze R 4.4.0 a jmenných prostorů balíků ve verzích:\n\n\n\n\n\n\nVersion\n\n\n\n\nbase\n4.4.0\n\n\ncli\n3.6.3\n\n\ncompiler\n4.4.0\n\n\ndatasets\n4.4.0\n\n\ndigest\n0.6.36\n\n\nevaluate\n0.24.0\n\n\nfastmap\n1.2.0\n\n\nglue\n1.7.0\n\n\ngraphics\n4.4.0\n\n\ngrDevices\n4.4.0\n\n\nhtmltools\n0.5.8.1\n\n\nhtmlwidgets\n1.6.4\n\n\njsonlite\n1.8.8\n\n\nknitr\n1.48\n\n\nlifecycle\n1.0.4\n\n\nmagrittr\n2.0.3\n\n\nmethods\n4.4.0\n\n\nrlang\n1.1.4\n\n\nrmarkdown\n2.27\n\n\nrstudioapi\n0.16.0\n\n\nstats\n4.4.0\n\n\nstringi\n1.8.4\n\n\nstringr\n1.5.1\n\n\ntools\n4.4.0\n\n\nutils\n4.4.0\n\n\nxfun\n0.46"
  },
  {
    "objectID": "01_uvod_do_R_1.html#hlavní-okna-a-panely",
    "href": "01_uvod_do_R_1.html#hlavní-okna-a-panely",
    "title": "3  R & RStudio",
    "section": "3.1 Hlavní okna a panely",
    "text": "3.1 Hlavní okna a panely\n\n\n\nObrázek 3.1: Obr. 1: Základní layout prostředí RStudio.\n\n\nV základním zobrazení Obrázek 3.1 bychom měli v levé části vidět panel Console. S konzolí nebudeme pracovat příliž intenzivně, slouží zejména k zadávání jednoduchých příkazů, například vyhodnocení proměnné. Pravou část vidíme rozdělenu na Výchozí rozvržení je možné měnit Tools &gt; Global optioins… &gt; Pane layout.\n\n\n\n\n\n\nÚloha\n\n\n\n\nProvedeme jedno užitečné nastavení duhových závorek\n\n\n\n\nObr. 2: Nastavení duhových závorek a dalších vlastností v okně Global Options…"
  },
  {
    "objectID": "01_uvod_do_R_1.html#zakládáme-projekt",
    "href": "01_uvod_do_R_1.html#zakládáme-projekt",
    "title": "3  R & RStudio",
    "section": "3.2 Zakládáme projekt",
    "text": "3.2 Zakládáme projekt\nJe vhodné seskupovat svoji práci do zv. projektů - ucelených souborů skriptů, dat a výstupů - podle jednotlivých projektů, kterým se věnuji.\n\nPři spuštěném programu z hlavní nabídky vybereme File &gt; New Project…\n\nVybereme New Directory a zvolíme New Project. Ostatní možnosti v tomto kurzu využívate nebudeme.\n\nProjektu je dále nutné zadat název Directory name. Pokud používate verzovací systém Git, můžete zaškrtnout volbu Create a git repository. V tomto kurzu používat nebudeme.\n\nPo úspěšném založení projektu by se mělo zobrazit hlavní okno programu s přednastvenými panely. V nastavení učeben ČZU odpovídá rozvržení 1. obrázku.\n\n\n\n\n\n\n\nÚloha\n\n\n\n\nVytvořte projekt s názvem “MVVD_cv1”."
  },
  {
    "objectID": "01_uvod_do_R_1.html#pracovní-postup-a-jeho-opakovatelnost",
    "href": "01_uvod_do_R_1.html#pracovní-postup-a-jeho-opakovatelnost",
    "title": "3  R & RStudio",
    "section": "3.3 Pracovní postup a jeho opakovatelnost",
    "text": "3.3 Pracovní postup a jeho opakovatelnost\nK systematické práci a analýze zejména v exaktních vědách patří dodržování jistých pracovních zásad, které umožňují jednak objektivní kontrolu výsledků a jednak jejich opětovného získání. Níže je uvedeno pár zásad, jejichž dodržování vede k celkové duševní pohodě a rovnováze jak vaší vlastní, tak kolegů.\n\nPři psaní kódu se řiďte unifikovaným schématem jmenných konvencí, odsazování a vkládání mezer, a komentování.\n\nKaždé cvičení začněte ideálně tvorbou nového projektu v oddělené složce, nebo alespoň nového skriptu.\n\nPři zavírání RStudio neukládejte pracovní prostředí do souboru “*.RData”. Uloží se do něj vše co máte právě v Environment, což nemusí nutně pocházet z pracovního postupu uchovaného ve skriptech (byť při dodržobvání jiných zásad z tohoto sezamu by tomu tak být nemělo).\nR bohužel umožnuje připínat a odepínat data.frame pomocí funkcí attach() a detach(), na které je vhodné ihned po přečtení této věty zapomenout.\n\n\n\nKód\n?ls\nrm(list = ls())\n?objects\n\n\n\n\nKód\nl &lt;- list(A = 1:3, B = 3:5)\nattach(l)\nA\n\n\n[1] 1 2 3\n\n\n\ndtto funkce fix(), která umožňuje manipulovat s daty formou GUI tabulkového procesoru"
  },
  {
    "objectID": "02_uvod_do_R_2.html#nápověda",
    "href": "02_uvod_do_R_2.html#nápověda",
    "title": "4  Opakovaní R",
    "section": "4.1 Nápověda",
    "text": "4.1 Nápověda\nZadává se do konzole ve tvaru help(&lt;jméno funkce&gt;), nebo &lt;jmeno funkce&gt;. Pokud bychom se chtěli podívat přímo do kódu funkce, také je to možné, jméno funkce pouze vepíšeme do konzole bez závorek, případně použijeme příkazu View(&lt;jmeno funkce&gt;). Kromě toho existuje v R také help.search(&lt;jméno funkce&gt;) pod zkratkou ??, jež hledá fulltextovou nápovědu napříč nainstalovanými balíčky. Dále je ještě možné prohledat mailing list jazyka R pomocí funkce RSiteSearch(), která otevře nové okno předdefinovaného prohlížeče. Dále jsou velmi užitečné tematicky ucelené karty nápověd: ?Logical, ?Constants, ?Control, ?Arithmetic, ?Syntax, ?Special a další.\n\n\n\n\n\n\nÚloha\n\n\n\n\nVyhledejte nápovědu k DateTimeClasses.\n\n\nCo reprezentují třídy POSIXct a POSIXlt?\n\nJaký je mezi nimi rozdíl?\n\nNalezněte funkci pro výpočet \\(5!\\)"
  },
  {
    "objectID": "02_uvod_do_R_2.html#jmenné-konvence",
    "href": "02_uvod_do_R_2.html#jmenné-konvence",
    "title": "4  Opakovaní R",
    "section": "4.2 Jmenné konvence",
    "text": "4.2 Jmenné konvence\nObjekty, které vznikají při práci s R musí splňovat následující jmenné konvence. Název objektu nelze začínat číslovkou nebo operátorem, nesmít být totžný s žádným klíčovým slovem, obsahovat mezeru.\n\nKlíčová slova\nif, else, repeat, while, function, for, in, next, repeat, break, TRUE, FALSE, NULL, Inf, NaN, NA, NA_integer_, NA_real_, NA_complex_, NA_character_, a speciální znak: _\nNedoporučuje se vkládat do názvu proměnné tečku, např. morava.prutoky, a pojmenovávat shodně s běžně používanou funkcí. R je “case-sensitive” jazyk tzn., že proměnná X se nerovná x.\n\n\n\n\n\n\nÚloha\n\n\n\n\nIntuitivně by nás mohlo vést nahrát data do proměnné data. Je to chybný postup, neboť data() je funkce zpřístupňující datové sady, kterou jsou součástí instalace. Vyzkoušejte.\n\n\n\n\n\nPříklady nevhodných proměnných\naaa, Morávka průtok [m/s], moje.proměnná\nŽádné z těchto jmen proměnných není proti"
  },
  {
    "objectID": "02_uvod_do_R_2.html#uvozovky-a-závorky",
    "href": "02_uvod_do_R_2.html#uvozovky-a-závorky",
    "title": "4  Opakovaní R",
    "section": "4.3 Uvozovky a závorky",
    "text": "4.3 Uvozovky a závorky\nPředstavují párové znaky jazyka R. Závorky se používají trojího typu: kulaté, hranaté a složené a všechny mají jasně vymezné pole působnosti.\n\n() se používají vždy se jménem funkce a uvozují prostor ve kterém se parametrizují argumenty funkce.\n\n[] se vždy pojí se jménem objektu (vektoru, pole, listu, …) a vymezují výběr z daného objektu.\n\n{} ohraničují blok kódu, který se má vykonat v celku.\n\n\nUvozovky uvozují textové řetězce. Lze používat jak dvojté \" tak jednoduché ' uvozovky zcela zástupně, je pouze třeba uzavírat shodným typem. Hojně se lze setkat se zpětnými uvozovkami, které se například použijí pro ohraničení nestandardního názvu sloupce ve struktuře.\n\n\nKód\n\"Správně\"\n\"Špatně'\n\n\n\n\n\n\n\n\nÚloha\n\n\n\n\nZadejte špatnou variantu z kódu výše do konzole a sledujte chování prostředí. Co vyjadřuje znak +?"
  },
  {
    "objectID": "02_uvod_do_R_2.html#operátory",
    "href": "02_uvod_do_R_2.html#operátory",
    "title": "4  Opakovaní R",
    "section": "4.4 Operátory",
    "text": "4.4 Operátory\nRozlišujeme operátory aritmetické, relační, přiřazení a patří sem i množinové funkce.\n\n\n\n\n\n\n\nZnak\nVýznam\n\n\n\n\n+ , - , * , / , %% , %/% , ** nebo ^, %*%\naritmetické operátory (sčítání, odčítání, násobení, dělení, modulo, celočíselné dělení, mocnění a maticové násobení)\n\n\n&gt; ,&gt;= , &lt; , &lt;= , == , !=\nrelační operátory (větší/menžší než, rovno, nerovno)\n\n\n! , & , && , | , ||\nlogické (ne, a soužasně, zdvojené po prvcích vektoru)\n\n\n~\nzadání funkčního vztahu\n\n\n&lt;- , =, &lt;&lt;-, -&gt;\noperátory přiřazení\n\n\n$\njmenný index v heterogenních strukturách\n\n\n:\nrozsah\n\n\nisTRUE() , all() , any() , %in% , setdiff()\nmnožinové funkce\n\n\n\n\n\nKód\n\n11xor(x)\n12isTRUE(x)\n13any()\n14all()\n15%in%\n16setdiff(x, y)\n\n\n\n11\n\nNegace\n\n12\n\nJe \\(x\\) “pravda”?\n\n13\n\nJe něco z obsahu “pravda”?\n\n14\n\nJe vše z obsahu “pravda”?\n\n15\n\nJe něco obsaženo v?\n\n16\n\nChybí něco něco z obsahu v?\n\n\n\n\n\n\n\n\n\n\nÚloha\n\n\n\n\nPoužite k výpočtu operátory či množinové funkce:\n\n\nZjistěte, zda je číslo 1109388 dělitelné 7.\n\nDo vektoru \\(\\mathbf{\\mathrm{a}}\\) uložte násobky 3 v rozsahu \\(\\langle-121;30\\rangle\\) a \\(\\mathbf{\\mathrm{b}}\\) násobky 7 v rozmezí\n\nVypište hodnoty"
  },
  {
    "objectID": "02_uvod_do_R_2.html#matematické-funkce",
    "href": "02_uvod_do_R_2.html#matematické-funkce",
    "title": "4  Opakovaní R",
    "section": "4.5 Matematické funkce",
    "text": "4.5 Matematické funkce\n\n\n\n\n\n\n\nFunkce\nVýznam\n\n\n\n\nlog(x)\nlogaritmus \\(x\\) o základu \\(e\\)\n\n\nexp(x)\nodlogaritmování \\(x(e^x)\\)\n\n\nlog(x, n)\nlogaritmus \\(x\\) o základu \\(n\\)\n\n\nlog10(x)\nlogaritmus \\(x\\) o základu \\(10\\)\n\n\nsqrt(x)\ndruhá odmocnina z \\(x\\)\n\n\nfactorial(x)\n\\(x!\\)\n\n\nchoose(n, x)\nbinomické koeficienty \\[                                                                                                                                                                                                                    \n                                                                                                                                                                                                                                  \\binom{n}{k} = \\frac{n!}{k!(n-k)!}              \n                                                                                                                                                                                                                               \\]\n\n\nceiling(x)\nnejmenší celé číslo větší než \\(x\\)\n\n\nfloor(x)\nnejvětší celé číslo před \\(x\\)\n\n\ntrunc(x)\nnejbliřší celé číslo mez i\\(x\\) a 0\n\n\nround(x, digits)\nzaokrouhlení \\(x\\) na \\(n\\) desetinných míst\n\n\nsignif(x, digits)\nzaokrouhlení na počet platných číslic\n\n\ncos(x) , sin(x) , tan(x)\nfunkce kosinus, sinus, tangens v radianech\n\n\nacos(x) , asin(x) , atan(x)\ninverzní trigonometrické funkce\n\n\nabs(x)\nabsolutní hodnota\n\n\n\n\n\n\n\n\n\nÚloha\n\n\n\n\nVyhodnoťte s pomocí R následující výrazy:\n\n\n\\(1 + 3 \\cdot (2 / 3)\\:\\mathrm{mod}\\:3\\)\n\n\\(\\dfrac{\\sin(2.3)}{\\cos(\\pi)}\\)\n\n\\(\\sum\\limits_{i = 1}^{53}i\\)\n\n\\(\\dfrac{-\\infty}{0}\\), \\(\\dfrac{-\\infty}{\\infty}\\), \\(\\dfrac{0}{0}\\)\n\n\\(\\left(\\dfrac{2}{35}\\right)^{0.5} \\cdot 3 \\cdot (2 / 3)\\)\n\n\\(20!\\)\n\n\\(\\int_{0}^{3\\pi} \\sin(x) dx\\)"
  },
  {
    "objectID": "02_uvod_do_R_2.html#datové-typy",
    "href": "02_uvod_do_R_2.html#datové-typy",
    "title": "4  Opakovaní R",
    "section": "4.6 Datové typy",
    "text": "4.6 Datové typy\nTvoří prvky struktur. R je dynamicky typovaný jazyk, nepožaduje před zavedením proměnné její deklaraci.\n\nZákladní datové typy a nucené převody mezi nimi.\n\n\n\n\n\n\n\n\n\n\n\nlogical\ninteger\nnumeric\ncomplex\ncharacter\n\n\n\n\nlogical\nlogical\ninteger\nnumeric\ncomplex\ncharacter\n\n\ninteger\nlogical\ninteger\nnumeric\ncomplex\ncharacter\n\n\nnumeric\nlogical\nnumeric\nnumeric\ncomplex\ncharacter\n\n\ncomplex\nlogical\ninteger + warning\nnumeric + warning\ncomplex\ncharacter\n\n\ncharacter\nNA_logical\nNA_integer + warning\nNA_numeric + warning\nNA_complex + warning\ncharacter\n\n\n\nK datovým typům (třídám) se pojí funkce is.___ a as.___ kteří slouží k dotazování na typ, resp. jeho nucenou změnu a dále funkce class(), mode() .\n\n\nKód\nis.character(\"ABC\")\n\n\n[1] TRUE\n\n\nKód\nas.integer(11 + 1i)\n\n\nWarning: imaginary parts discarded in coercion\n\n\n[1] 11"
  },
  {
    "objectID": "02_uvod_do_R_2.html#základní-datové-struktury",
    "href": "02_uvod_do_R_2.html#základní-datové-struktury",
    "title": "4  Opakovaní R",
    "section": "4.7 Základní datové struktury",
    "text": "4.7 Základní datové struktury\nZákladní datové struktury rozlišujeme na atomické (homogenní) a heterogenní datové struktury.\n\n4.7.1 Homogenní datové struktury\nHomogenní datové struktury obsahují atomické vektory, faktory, matice a pole. Název je odvozen od jejich omezení v podvýběru obsahovat pouze typ sebe sama tzn. podvýběr matice může být opět pouze matice.\n\n4.7.1.1 Atomický vektor vector\nVektor je v jazyce R základní stavební strukturou, nic jaká skalární veličina zde není. Koncept vektoru je zde chápán v matematickém smyslu jako vektor hodnot, reprezentující bod v \\(n-\\)dimenzionálním prostoru.\n\\[\n\\mathbf{\\mathrm{u}} =\n\\begin{pmatrix}\n1\\\\\n1.5\\\\\n-14\\\\\n7.223\\\\\n\\end{pmatrix}, \\qquad\n\\mathbf{\\mathrm{v}} =\n\\begin{pmatrix}\n\\mathrm{TRUE}\\\\\n\\mathrm{FALSE}\\\\\n\\mathrm{TRUE}\\\\\n\\mathrm{TRUE}\\\\\n\\end{pmatrix}, \\qquad\n\\mathbf{\\mathrm{u^T}} =\n\\begin{pmatrix}\n1 & 1.5 & -14 & 7.233\\\\\n\\end{pmatrix}\n\\]\nMůže nabývat jakéhokoliv datového typu, nicméně všechny prvky v daném vektoru jsou právě jednoho typu, čímž rozumíme, že je tato struktura tzv. homogenní. Vektor je možné vytvořit mnoha způsoby, mezi nejčastější patří funkce vector(mode = \"numeric\", length = 10) a funkce c(), případně vzniká pomocí opetárorů [ nebo [[.\nS vektory se pojí důležité pravidlo - recyklace hodnot.\n\n\nKód\nv &lt;- c(1.4, 2.0, 6.1, 2.7)\nu &lt;- c(2.0, 1.3)\n1u + v\n2u * v\n3u * 2.3\n\n\n\n1\n\nSčítám vektory přičemž délka jednoho je násobkem délky druhého.\n\n2\n\nNásobím vektory přičemž délka jednoho je násobkem délky druhého.\n\n3\n\nNásobení vektoru číslenou hodnotou\n\n\n\n\n[1] 3.4 3.3 8.1 4.0\n[1]  2.80  2.60 12.20  3.51\n[1] 4.60 2.99\n\n\n\nPráce s vektory\n\n\nKód\n1x &lt;- 1:10\nx &lt;- seq(10:1)\nx &lt;- vector(mode = \"numeric\", length = 10)\nx &lt;- replicate(n = 10, expr = eval(2))\nx &lt;- sample(x = 10, size = 10, replace = TRUE)\nx &lt;- rep(x = 15, times = 2)\nx &lt;- rnorm(n = 10, mean = 2, sd = 20)\n2t(x) * x\n3names(x) &lt;- LETTERS[1:length(x)]\n4x[x &gt; 0]\n5x[1:3]\n\n\n\n1\n\nTvorba vektoru \\(\\boldsymbol{\\mathrm{x}}\\) různými úkony. Použití sekvence, repetice, opakování a vzorkování.\n\n2\n\nTranspozice vektoru.\n\n3\n\nPojmenování pozic ve vektoru\n\n4\n\nVýběr hodnot z vektoru na základě podmínky\n\n5\n\nVýběr hodnot z vektoru na základě pozice\n\n\n\n\n         [,1]     [,2]    [,3]     [,4]     [,5]     [,6]    [,7]     [,8]\n[1,] 5.124613 411.5064 158.136 69.01407 198.7767 924.8587 1085.05 955.1436\n        [,9]    [,10]\n[1,] 1245.72 1326.243\n        A         B         D         F         G         H         J \n 2.263761 20.285620  8.307471 30.411489 32.940102 30.905397 36.417615 \n         A          B          C \n  2.263761  20.285620 -12.575213 \n\n\n\n\n\n\n\n\nÚloha\n\n\n\n\n\nVytvořte libovolným způsobem vektor x 10 různých číselných hodnot, kde \\(x\\in\\mathbb{R}\\).\nZapište výraz pro výběr čísel v rozmezí -5 a 5 z tohoto vektoru.\nProveďte převod na celočíselný typ a diskutujte výsledek.\nPřidejte k vektoru 3 pozice “A”, “B” a “C”, změnil se vektor?\n\n\n\n\n\n\n\n4.7.1.2 Faktor\nFaktorem rozumíme kategorickou proměnnou, která je určena výčtem hodnot. Ukážeme si na příkladu “tříd přesnosti měření”.\n\n\nKód\ntrida &lt;- factor(x = 1:4,\n                labels = c(paste(1:4, \". třída\", sep = \"\")), \n                ordered = TRUE)\n\n\n\n\n4.7.1.3 Matice matrix\nRozšířením rozměrů vektoru vznikne matice nebo obecně pole.\n\n\nKód\nx &lt;- c(1:10)\n1dim(x) &lt;- c(2, 5)\nx\n\n\n\n1\n\nPřevod na rozměr \\(2\\times 2\\)\n\n\n\n\n     [,1] [,2] [,3] [,4] [,5]\n[1,]    1    3    5    7    9\n[2,]    2    4    6    8   10\n\n\n\n\n\nFunkce\nÚkon\n\n\n\n\nnrow(), ncol()\npočet řádků, sloupců matice\n\n\ndim()\nřádky \\(\\times\\) sloupce matice\n\n\ndet()\ndeteminant matice\n\n\neigen()\nvlastní čísla a vlastní vektory matice\n\n\ncolnames()\njména sloupců v matici\n\n\nrowSums()\nřádkové součty matice\n\n\ncolMeans()\nsloupcové průměry matice\n\n\nM[m, ]\nVýběr \\(m\\)-tého řádku matice\n\n\nM[ ,n]\nVýběr \\(n\\)-tého sloupce matice\n\n\n\nStejně jako u vektoru opět platí typová homogenita\n\n\nKód\nB &lt;- matrix(\n  data = c(1, 2 + 3i, 5.4, 4, 5), \n  nrow = 2, \n  ncol = 3)\n\n\nWarning in matrix(data = c(1, 2 + (0+3i), 5.4, 4, 5), nrow = 2, ncol = 3): data\nlength [5] is not a sub-multiple or multiple of the number of rows [2]\n\n\n\n\nKód\nA &lt;- matrix(data = seq(from = 1, to = 16, by = 2), nrow = 4)\n1str(A)\n2dim(A)\n3svd(A)\n4diag(A)\n# sweep(x = A, MARGIN = 1, STATS = mean)\n##  num [1:4, 1:2] 1 3 5 7 9 11 13 15\n## [1] 4 2\n## $d\n## [1] 25.930394  2.759471\n## \n## $u\n##            [,1]       [,2]\n## [1,] -0.3396065 -0.7646355\n## [2,] -0.4383147 -0.3284512\n## [3,] -0.5370229  0.1077330\n## [4,] -0.6357311  0.5439173\n## \n## $v\n##            [,1]       [,2]\n## [1,] -0.3389761  0.9407950\n## [2,] -0.9407950 -0.3389761\n## \n## [1]  1 11\n\n\n\n1\n\nStruktura objektu\n\n2\n\nDimenze matice\n\n3\n\nSingulární rozklad\n\n4\n\nPrvky na diagonále matice\n\n\n\n\n\n\n\n\n\n\nÚloha\n\n\n\n\n\nS pomocí nápovědy k funkci rnorm() vytvořte matici \\(\\boldsymbol{\\mathrm{M}}; h(\\boldsymbol{\\mathrm{M}}) = 8\\) náhodných čísel.\nVytvořte vektor hodnot od \\(100\\) do \\(1\\) sestupně, využijte nápovědu k funkci seq().\n\nSpočtěte rozdíl, matic \\(\\boldsymbol{\\mathrm{A}}\\), \\(\\boldsymbol{\\mathrm{B}}\\). \\[\\boldsymbol{\\mathrm{A}} = \\left(\n  \\begin{matrix}\n  2 & 2 & 5\\\\\n  9 & 2 & 7\\\\\n  1 & 3 & 18\\\\\n  \\end{matrix}\n  \\right),\\qquad\n  \\boldsymbol{\\mathrm{B}} = \\left(\n  \\begin{matrix}\n  5 & 4 & 5\\\\\n  -7 & 2 & 4\\\\\n  10 & 1 & 5\\\\\n  \\end{matrix}\n  \\right)\n  \\]\n\nSpočítejte inverzní matici k matici \\(\\boldsymbol{\\mathrm{A}}\\). Najděte vhodnou funkci s pomocí nápovědy.\n\nS pomocí hodnot TRUE/FALSE vytvořte matici \\(\\boldsymbol{\\mathrm{M}}(3,3)\\), změňte typ prvku na pozici \\(\\boldsymbol{\\mathrm{M}}[1, 1]\\) na textový řetězec. Ovlivní tato změna ostatní prvky v matici?\n\n\n\n\n\n\n\n\n4.7.2 Heterogenní datové struktury\nZa rúznorodé struktury se označují ty, které mohou uchovávat dva a více prvků rozdílného typu současně. Z těch základních to jsou data.frame a list, dále pak S4, nebo R6 třídy, případně další uživatelem vytvořené struktury.\n\n4.7.2.1 Datová tabulka data.frame\ndata.frame je de facto vektor stejně dlouhých vektorů, které kromě toho, že musí být shodné délky, mohou být vzájmeně rozdílného datového typu.\n\n\nKód\nDF &lt;- data.frame(name = letters[1:5], \n                 value = rnorm(5))\nDF\n##   name      value\n## 1    a  0.3814827\n## 2    b -1.3191437\n## 3    c -1.0386292\n## 4    d -0.6712923\n## 5    e  1.5656246\nDF[\"name\"]        # podvýběr do data.frame\n##   name\n## 1    a\n## 2    b\n## 3    c\n## 4    d\n## 5    e\nDF[[\"name\"]]      # podvýběr do vektoru\n## [1] \"a\" \"b\" \"c\" \"d\" \"e\"\nDF[, \"name\"]      # podvýběr do vektoru\n## [1] \"a\" \"b\" \"c\" \"d\" \"e\"\n\n\nPráce uvnitř data.frame\n\n\nKód\nDF &lt;- data.frame(\n  mon = rep(month.abb, \n            times = c(31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31)), \n  value = rnorm(365), \n  yr = 2001)\nstr(DF)\n## 'data.frame':    365 obs. of  3 variables:\n##  $ mon  : chr  \"Jan\" \"Jan\" \"Jan\" \"Jan\" ...\n##  $ value: num  1.22503 0.38547 0.00212 0.1007 2.04002 ...\n##  $ yr   : num  2001 2001 2001 2001 2001 ...\nnames(DF)\n## [1] \"mon\"   \"value\" \"yr\"\nnrow(DF)\n## [1] 365\nncol(DF)\n## [1] 3"
  },
  {
    "objectID": "02_uvod_do_R_2.html#řídící-struktury",
    "href": "02_uvod_do_R_2.html#řídící-struktury",
    "title": "4  Opakovaní R",
    "section": "4.8 Řídící struktury",
    "text": "4.8 Řídící struktury\nZajišťují obecný průběh programu, tvoří základní prvky algoritmů. Mezi řídící strukury řadíme podmínky a cykly. Mohli bychom přidat i složené závorky, něboť pro struktury uvozují bloky kódu.\n\n4.8.1 Podmínky\n\n4.8.1.1 if()\n\n\nKód\nA &lt;- 1\nif(A &gt;= 1) {\n  cat(\"A je větší nebo shodné s 1.\")\n}\n\n\nA je větší nebo shodné s 1.\n\n\n\n\nKód\nA &lt;- 5\n1if(A &gt;= 2) {\n  cat(\"A je větší nebo shodné s 2.\")\n} else if(A &gt; 2) {\n  cat(\"A je větší než 2.\")\n}\n\n\n\n1\n\nŘetěz podmínek se uzavře v momentě, kdy je výraz v závorce poprvé vyhodnocen jako pravdivý.\n\n\n\n\nA je větší nebo shodné s 2.\n\n\n\n\n4.8.1.2 ifelse()\nVektorizovaný tvar podmínky, který lze volat na prvky struktur.\n\n\nKód\nx &lt;- -5:5\ncat(\"Prvek x + 3 je více než 0: \", ifelse(x - 3 &gt; 0, yes = \"Ano\", no = \"Ne\"))\n\n\nPrvek x + 3 je více než 0:  Ne Ne Ne Ne Ne Ne Ne Ne Ne Ano Ano\n\n\n\n\n4.8.1.3 switch()\n\n\nKód\nvarianta &lt;- \"B\"\n2 * (switch(\n      varianta,\n1        \"A\" = 2,\n2        \"B\" = 3))\n\n\n\n1\n\nVarianta “A nenastala,\n\n2\n\nnastala varianta “B”, tzn. výraz je vyhodnocen ve tvaru \\(2\\cdot 3 = 6\\)\n\n\n\n\n[1] 6\n\n\n\n\n\n\n\n\nÚloha\n\n\n\n\n\nVytvořte s pomocí podmínek známkovací schéma:\n\n\n1 | 90 - 100 % |\n2 | 75 - 89 % |\n3 | 60 - 74 % |\n4 | &lt; 60 % |\n\n\n\n\n\n4.8.2 Cykly\nZajištují, že se část kódu provede opakovaně.\n\n4.8.2.1 for() z definovaného rozsahu\nPokud je předem znám počet opakování cyklu (nebo je i jinak implicitně určen), používá se for cyklu.\n\n\nKód\nfor(i in 1:4) {\n  cat(\"Iterace \", i, \"\\n\")\n}\n\n\nIterace  1 \nIterace  2 \nIterace  3 \nIterace  4 \n\n\n\n\n4.8.2.2 while() s pomocí podmínky\nV případech, kdy počet opakování není předem znám, ale je známa podmínka, za které cyklus má probíhat.\n\n\nKód\ni &lt;- 1\nwhile(i &lt; 5) {\n  cat(\"Iterace \", i, \"\\n\")\n  i &lt;- i + 1\n}\n\n\nIterace  1 \nIterace  2 \nIterace  3 \nIterace  4 \n\n\n\n\n4.8.2.3 repeat s únikovou sekvencí\nPočet opakování neni předem znám. Nicméně lze definovat případ, kdy má cyklus skončit.\n\n\nKód\ni &lt;- 1\n1repeat {\n  cat(\"Iterace \", i, \"\\n\")\n  i &lt;- i + 1\n2  if(i &gt;= 5) break #&lt;1&gt;\n}\n\n\n\n1\n\nProváděj\n\n2\n\nVnořenou podmínkou následovanou klíčovým slovem break definujeme konec cyklu.\n\n\n\n\nIterace  1 \nIterace  2 \nIterace  3 \nIterace  4 \n\n\nKromě únikového klíčového slova break po němž cyklus okamžitě skončí je k využití příkaz next, po němž se zbytek příkazů v dané iteraci přeskočí a operátor %||%.\n\n\n\n\n\n\nÚloha\n\n\n\n\n\nVytvořte cyklus, který pro čísla \\(1, 2, 3, 4, 5\\) vypíše jejich třetí mocniny\nPro stejná čísla provede kumulativní součet.\nPro číslo n provede výpočet faktorialu.\nS pomocí funkce readline() od uživatele požaduje číslo, které vždy vypíše. Pokud je číslo záporné, skončí smyčku."
  },
  {
    "objectID": "02_uvod_do_R_2.html#vlastní-funkce",
    "href": "02_uvod_do_R_2.html#vlastní-funkce",
    "title": "4  Opakovaní R",
    "section": "4.9 Vlastní funkce",
    "text": "4.9 Vlastní funkce\nK funkce slouží klíčové slovo function, které v závorkách doprovází argumenty sloužící k vnitřní specifikaci funkce.\n\n\nKód\nx &lt;- rnorm(100)\n1nejblizsi_hodnota &lt;- function(x, value) {\n  x[which(abs(x - value) == min(abs(x - value)))]\n}\n\ncat(\"Hodnota nejblíže 0 z vektoru x je:\" , nejblizsi_hodnota(x = x, value = 0))\n\n\n\n1\n\nPříklad funkce, která vyhledá nejbližší z hodnot vektoru x k referenční hodnotě value.\n\n\n\n\nHodnota nejblíže 0 z vektoru x je: -0.01192614"
  },
  {
    "objectID": "02_uvod_do_R_2.html#práce-s-daty",
    "href": "02_uvod_do_R_2.html#práce-s-daty",
    "title": "4  Opakovaní R",
    "section": "4.10 Práce s daty",
    "text": "4.10 Práce s daty\nChybějící záznamy a speciální numerické případy NA, NaN, NULL, Inf, -Inf jsou hodnoty, které mohou vzniknout například jako výsledek početního úkonu, nebo špatného importu dat. Výraz NA je tvořen v datovém typu logical, nejméně náročném na paměť. Jinak je možné specifikovat chybějící hodnotu ve všech ostatních datových typech NA_real_ (odpovídá double), NA_integer_, NA_complex_ a NA_character_, které je vhodné využít zejména při vytváření datového rámce s přesně zadaným typem sloupců. NULL je návratová hodnota mnoha funkcí a výrazů, reprezentuje prázdný objekt. Výsledky NaN a ±Inf pochází z aritmetických operací \\(\\dfrac{1}{0}\\) resp. \\(\\dfrac{\\pm0}{1}\\) . na.omit(), is.na(), complete.cases().\n\n\nKód\nglobal_temperatures &lt;- read.csv(file = \"./data/JonesGlobalT.csv\", row.names = 1)\nhead(x = global_temperatures, n = 5)\n\n\n  YEAR    JAN    FEB    MAR    APR    MAY    JUN    JUL    AUG    SEP    OCT\n1 1850 -0.702 -0.284 -0.732 -0.570 -0.325 -0.213 -0.128 -0.233 -0.444 -0.452\n2 1851 -0.303 -0.362 -0.485 -0.445 -0.302 -0.189 -0.215 -0.153 -0.108 -0.063\n3 1852 -0.308 -0.477 -0.505 -0.559 -0.209 -0.038 -0.016 -0.195 -0.125 -0.216\n4 1853 -0.177 -0.330 -0.318 -0.352 -0.268 -0.179 -0.059 -0.148 -0.409 -0.359\n5 1854 -0.360 -0.280 -0.284 -0.349 -0.230 -0.215 -0.228 -0.163 -0.115 -0.188\n     NOV    DEC ANNUAL\n1 -0.190 -0.268 -0.375\n2 -0.030 -0.067 -0.223\n3 -0.187  0.083 -0.224\n4 -0.256 -0.444 -0.271\n5 -0.369 -0.232 -0.246\n\n\n\n\nKód\n1global_temperature_yr &lt;- aggregate(x = . ~ YEAR,\n                                   FUN = mean,\n                                   data = global_temperatures)\nhead(x = global_temperature_yr, n = 5)\n\n\n\n1\n\nAgregace dat do průměrů za roční období.\n\n\n\n\n  YEAR    JAN    FEB    MAR    APR    MAY    JUN    JUL    AUG    SEP    OCT\n1 1850 -0.702 -0.284 -0.732 -0.570 -0.325 -0.213 -0.128 -0.233 -0.444 -0.452\n2 1851 -0.303 -0.362 -0.485 -0.445 -0.302 -0.189 -0.215 -0.153 -0.108 -0.063\n3 1852 -0.308 -0.477 -0.505 -0.559 -0.209 -0.038 -0.016 -0.195 -0.125 -0.216\n4 1853 -0.177 -0.330 -0.318 -0.352 -0.268 -0.179 -0.059 -0.148 -0.409 -0.359\n5 1854 -0.360 -0.280 -0.284 -0.349 -0.230 -0.215 -0.228 -0.163 -0.115 -0.188\n     NOV    DEC ANNUAL\n1 -0.190 -0.268 -0.375\n2 -0.030 -0.067 -0.223\n3 -0.187  0.083 -0.224\n4 -0.256 -0.444 -0.271\n5 -0.369 -0.232 -0.246\n\n\n\n\nKód\npar(mfrow = c(1, 2))\nwith(data = global_temperature_yr, expr = plot(YEAR, JAN, type = \"l\"))\nwith(data = global_temperature_yr, \n     expr = boxplot(ANNUAL, horizontal = TRUE))\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nCvičení\n\n\n\n\nNahrajte data do prostředí s pomocí vhodně parametrizované read.___() funkce.\n\nDoplňte hydrologický rok.\n\nProveďte agregaci dat průměrem pro jednotlivé měsíce.\n\nVyneste do grafu pomocí funkce plot()."
  }
]