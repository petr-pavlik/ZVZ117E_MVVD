# Časové řady {#sec-casoverady}

::: callout-warning
## Cíle cvičení

-   Umět definovat časovou řadu s pomocí `ts()`.
-   Detekovat přítomnost trendu, bodu zlomu.
-   Umět aplikovat klouzavý průměr jako zhlazovací funkci.
:::

Časové řady jsou chronologicky uspořádané posloupnosti hodnot jedné nebo více sledovaných veličin.\
Časové řady rozeznáváme deterministické, stochastické s konstantním nebo proměnlivým časovým krokem. Budeme procvičovat řady stochastické. Dále časovou řadu nazýváme **homogenní**, pokud hodnoty jednolivých členů pozorované řady odrážejí pouze přirozenou proměnlivost studované veličiny.\
Cíli analýzy časové řady je jednak pochopení a určení modelu, generujícího sledovaná data, jednak predikce vývoje na základě tohoto modelu.

Funkce pro základní statistické zpracování časových řad opět nalezneme v balíčku `stats`.

```{r}
args(stats::ts)
```

::: callout-note
## Další zdroje

Zpracování časových řad je jedním ze základních tématických okruhů v R. Stejně jako je tomu u ostatních okruhů, můžeme může být užitečné se zorientovat studiem příslušného [CRAN Task View](https://cran.r-projecet.org/web/views/TimeSeries.html).
:::

Budeme pracovat se dvěma datovými sadami:

1.  Časovou řadou historických měření z pražského Klementina od roku 1776.
2.  Vnitřní datová sada R `co2`, kterou nahrajete pomocí funkce `data()`

```{r, include=FALSE}
klementinum <- readRDS("data/klementinum.rds")
klementinum$date <- as.POSIXct(paste(klementinum$yr, 
                             sprintf(fmt = "%02d", klementinum$mon),
                             sprintf(fmt = "%02d", klementinum$day),
                       sep = "-"), tz = "CET", format = "%Y-%m-%d")
```

## `ts()` objekt

::: callout-tip
## Úloha

1.  Nejprve vhodnou funkcí nahrajte datovou sadu `klementinum.rds`.
2.  Vytvořte formát datumu (`Date`) sjednocením sloupců `yr`, `mon`, `day`. U sloupců s denními a měsíčními hodnotami je nutné nejprve doplnit na dvoumístný formát (napří. `02` místo `2`). Použijte nápovědu k funkci `sprinft()`. \
    Výsledek by měl vypadat takto:

```{r, echo=FALSE}
head(klementinum, 7)
```

3.  Datovou sadu máme nahranou. Ověřte, zda se jedná o časovou řadu `is.ts()` a udělejte si základní obrázek o průběhu veličin s pomocí grafů. Inspirujte se v @sec-grafy.
:::

```{r, fig.align='center', fig.width=10, eval=FALSE}
plot(main = "Klementinum 1776 - 2023, průměrná denní teplota ", 
     x = klementinum$date, 
     y = klementinum$tavg, 
     type = "p", 
     cex = 0.1, 
     col = "#00000050", 
     ylab = expression(T[avg]), 
     xlab = "")
```

```{r, fig.align='center', fig.width=10, eval=FALSE, echo=FALSE}
png(filename = "./images/chapter_9_fig_1.png", width = 1900, height = 1000, res = 200)
plot(main = "Klementinum 1776 - 2023, průměrná denní teplota ", 
     x = klementinum$date, 
     y = klementinum$tavg, 
     type = "p", 
     cex = 0.1, 
     col = "#00000050", 
     ylab = expression(T[avg]), 
     xlab = "")
dev.off()
```

![](images/chapter_9_fig_1.png)

## Dekompozice časové řady

Proces identifikace a rozkladu časové řady na trendovou, sezónní, cyklickou a náhodnou složku buďto v **aditivním** nebo **multiplikativním** typu. Velmi silné tam, kde je silný trend nebo stabilní sezónní složka.

$$
\begin{array}{c}
Y(t)=T_t + S_t + C_t + R_t\\ 
Y(t)=T_t \times S_t\times C_t\times R_t
\end{array}
$$

### Trendová složka

Trend je obecná tendence vývoje zkoumaného jevu za delší období; může být lineární či nelineární. Může být rostoucí či klesající. Časové řady bez trendu se označují za **stacionární**.

Model trendu můžeme odhadnout pomocí lineárního modelu `lm()`. Můžeme vytvořit rovnou tři varianty trendu: lineární, kvadratický a kubický. Vyhodnotíme pomocí **Akaikeho informačního kritéria**.

```{r, eval = FALSE}
md1 <- lm(tavg ~ I(date), 
          data = klementinum)
md2 <- lm(tavg ~ date + I(as.numeric(date)^2), 
          data = klementinum)
md3 <- lm(tavg ~ date + I(as.numeric(date)^2) + I(as.numeric(date)^3), 
          data = klementinum)
res <- as.numeric(lapply(X = list(md1, md2, md3), FUN = AIC))
names(res) <- c("md1", "md2", "md3")
res
```

```{r, fig.align='center', fig.width=10, eval=FALSE, include=FALSE}
png(filename = "./images/chapter_9_fig_2.png", width = 1900, height = 1000, res = 200)
plot(main = "Klementinum 1776 - 2023, průměrná denní teplota ", 
     x = klementinum$date, 
     y = klementinum$tavg, 
     type = "p", 
     cex = 0.1, 
     col = "#00000050", 
     ylab = expression(T[avg]), 
     xlab = "")
md1 <- lm(tavg ~ I(date), data = klementinum)
md2 <- lm(tavg ~ date + I(as.numeric(date)^2), data = klementinum)
md3 <- lm(tavg ~ date + I(as.numeric(date)^2) + I(as.numeric(date)^3), data = klementinum)
# Generate a smooth sequence of x-values across the full range of dates
date_seq <- seq(min(klementinum$date), max(klementinum$date), length.out = 1000)

pred_md1 <- predict(md1, newdata = data.frame(date = date_seq))
pred_md2 <- predict(md2, newdata = data.frame(date = date_seq))
pred_md3 <- predict(md3, newdata = data.frame(date = date_seq))

lines(date_seq, pred_md3, col = "#660033", lwd = 2.5) # Similar to abline()
dev.off()
```

![](images/chapter_9_fig_2.png)

Časovou řadu zbavenou trendu.

```{r, eval=FALSE, echo=FALSE}
png(filename = "./images/chapter_9_fig_3.png", width = 1900, height = 1000, res = 200)
detrended_klementinum_tavg <- klementinum$tavg - fitted(md3)
plot(main = "Řada zbavená trendu", 
     x = 1:length(detrended_klementinum_tavg), 
     y = detrended_klementinum_tavg, 
     type = "p", 
     cex = 0.1, 
     col = "#00000050", 
     ylab = expression(T[avg]), 
     xlab = "")
dev.off()
```

![](images/chapter_9_fig_3.png)

Časová řada v R je určena

```{r}
klementinum_ts <- ts(
  data = klementinum$tavg, 
  start = c(klementinum$yr[1], klementinum$mon[1], klementinum$day[1]), 
  deltat = 1/365.25)
```

### Sezónní složka

Sezónní složka představuje periodickou změnu, která se odehrává v průběhu roku opakovaně.

```{r, eval=FALSE}
klementinum$detrended_avg <- klementinum$tavg - predict(md3)
klementinum$doy <- as.numeric(format(klementinum$date, "%j"))

md4 <- lm(
  detrended_avg ~ sin(2 * pi * doy / 365.25) + cos(2 * pi * doy / 365.25), 
  data = klementinum)

klementinum$seasonal <- predict(md4)

plot(sin(as.numeric(klementinum90_20$date)*2*pi) + 
         cos(as.numeric(klementinum90_20$date)*2*pi), type = "l")
plot(klementinum$seasonal,  
     type = "p", 
     cex = 0.1, 
     col = "#00000050")

klementinum$residuals <- klementinum$tavg - predict(md3) - klementinum$seasonal
```

### Cyklická složka

Cyklická složka je oscialce kolem trendu, která může mít proměnlivou periodu i amplitudu se složitě identifikovatelnou příčinností.

### Náhodná složka

```{r}
plot(klementinum$residuals,  
     type = "p", 
     cex = 0.1, 
     col = "#00000050")

qqnorm(klementinum$residuals)
qqline(klementinum$residuals, col = "#660033")
acf(klementinum$residuals, main = "ACF of Residuals")
```

Zahrnuje nejistoty v měření, zpracování apod. U dobře určeného modelu má tato složka charakter bílého šumu

$$
\mathbb{E}X_t = 0 \mathrm{\:pro\:všechna\:} t\:\text{a var}(X) < \infty
$$ *Posloupnost náhodných veličin nazveme bílý šum, pokud jde o posloupnost centrovaných nekorelovaných veličin s kladným konečným rozptylem.*\

## Box-Jenkins analýza (ARIMA proces)

Tento pohled je založen na přístupu k řadě jako stochastickému procesu, který je možné zachytit kombinací autoregresní složky, integrační složky a klouzavého průměru. Využívá se pro simulace časových řad.

ARIMA(p, d, q)

### Parciální autokorelace

Vyjadřuje vztah mezi hodnotou v čase $t$ a hodnotou lag $t$, po ošetření korelace Používá se k identifikaci řádu autoregresivního modelu AR($p$).

Stupeň určujeme pomocí funkce `pacf()`,

```{r, fig.align='center', fig.height=10, fig.width=10, echo=FALSE}
par(mfrow = c(2, 2))
# Calculate the ACF without plotting
acf_result <- acf(klementinum$tavg, plot = FALSE)

# Plot the ACF values manually
plot(acf_result, main = "ACF", ylim = c(-1, 1))

# Add custom confidence intervals
abline(h = c(-1.96 / sqrt(length(klementinum$tavg)), 1.96 / sqrt(length(klementinum$tavg))), 
       col = "#660033", lty = 2)  # Change the color here

pacf_result <- pacf(klementinum$tavg, plot = FALSE)

# Plot the ACF values manually
plot(pacf_result, main = "PACF", ylim = c(-1, 1))

abline(h = c(-1.96 / sqrt(length(klementinum$tavg)), 1.96 / sqrt(length(klementinum$tavg))), 
       col = "#660033", lty = 2)  # Change the color here


diff_acf_result <- acf(diff(klementinum$tavg), plot = FALSE)

# Plot the ACF values manually
plot(diff_acf_result, main = "d = 1, ACF", ylim = c(-1, 1))

# Add custom confidence intervals
abline(h = c(-1.96 / sqrt(length(klementinum$tavg)), 1.96 / sqrt(length(klementinum$tavg))), 
       col = "#660033", lty = 2)  # Change the color here

diff_pacf_result <- pacf(diff(klementinum$tavg), plot = FALSE)

# Plot the ACF values manually
plot(diff_pacf_result, main = "d = 1, PACF", ylim = c(-1, 1))

abline(h = c(-1.96 / sqrt(length(klementinum$tavg)), 1.96 / sqrt(length(klementinum$tavg))), 
       col = "#660033", lty = 2)  # Change the color here

```

### Model klouzavého průměru

Určuje se s pomocí autokorelační funkce `acf()` procesu MA($q$) s posunem $q+1$ nebo vyšším.

```{r, fig.align='center', fig.width=10, results='hide'}
# Define the time window and subset the data
okno <- seq(from = as.POSIXct("1990-01-01"), 
            to = as.POSIXct("2020-12-31"), 
            by = 3600*24)
klementinum90_20 <- klementinum[klementinum$date %in% okno, ]

# Set up a multi-panel plotting window
par(mfrow = c(1, 3))

# Apply the plotting and trend line logic
sapply(X = c(1, 30, 90), 
       FUN = function(x) {
         # Create lagged variables
         lagged_x <- klementinum90_20$tavg[-c(1:x)]
         lagged_y <- klementinum90_20$tavg[-c((length(klementinum90_20$tavg) - x + 1):length(klementinum90_20$tavg))]
         
         # Scatter plot
         plot(lagged_x, lagged_y, 
              cex = 0.5, col = "#00000080", 
              xlab = paste("Lag", x), ylab = "Tavg",
              main = paste("Lag =", x))
         
         # Fit linear model and add trend line
         lm_fit <- lm(lagged_y ~ lagged_x)
         abline(lm_fit, col = "#660033", lwd = 2)
       }
)
```

### Klouzavé průměry

Klouzavý průměr je zhlazovací funkcí, jejíž využití má prostor například v odhadu cyklické složky časové řady.

::: callout-tip
## Úloha

5.  Použijte filtr na poslendích posledních 5 let z data frame `klementinum` a uložte do proměnné `klementinum_last_5`.
:::

```{r, echo=FALSE}
klementinum_last_5 <- klementinum[klementinum$yr %in% max(klementinum$yr):(max(klementinum$yr) - 4), ]
```

Napíšeme shlazovací funkci pro 30denní okno a vykreslíme do grafu:

```{r}
ma <- function(x, window = 30) {
  filtr <- rep(1/window, window)
  stats::filter(x, filtr)
}
```

```{r, fig.width=10}
plot(klementinum_last_5$tavg, 
     col = "#00000075", 
     cex = 0.5, 
     main = "30denní klouzavý průměr Klementinum 2019 - 2023")
lines(ma(klementinum_last_5$tavg), col = "#006666", lwd = 3)
```

### Sezónní složka

Sezónní složku je možné simulovat následující rovnicí

$$
y = \alpha + \beta\sin(2\pi t) + \gamma\cos(2\pi t)+ \epsilon
$$

kde $\alpha$ je itne

```{r, eval=TRUE, fig.width = 10, fig.align='center'}
md2 <- lm(
  tavg ~ sin(as.numeric(klementinum90_20$date)*2*pi) + 
         cos(as.numeric(klementinum90_20$date)*2*pi), 
  data = klementinum90_20)
plot(sin(as.numeric(klementinum90_20$date)*2*pi) + 
         cos(as.numeric(klementinum90_20$date)*2*pi), type = "l")
plot(klementinum90_20$tavg - fitted.values(md2),  
     type = "p", 
     cex = 0.1, 
     col = "#00000050")
```
