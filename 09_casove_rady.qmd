# Časové řady

::: callout-warning
## Cíle cvičení

  - Definovat časovou řadu s pomocí `ts()`
  - Detekovat přítomnost trendu, bodu zlomu
  - Aplikovat klouzavý průměr jako zhlazovací funkci
:::

Funkce pro základní statistické zpracování časových řad opět nalezneme v balíčku `stats`. 


::: callout-note
## Další zdroje

Mnoho dalších nalezneme například studiem příslušného [CRAN Task View](https://cran.r-projecet.org/web/views/TimeSeries.html).
:::

`ts()`
```{r}
?ts
```


Budeme pracovat se dvěma datovými sadami:
  
  1. Naše již připravená data z CAMELS
  2. Vnitřní datová sada R `co2`, kterou nahrajete pomocí funkce `data()`

```{r}
dataset <- readRDS("data/data.rds")[1:15000,]
data("co2")
```

Využijeme znalostí z @sec-grafy

```{r, fig.align='center'}
hydroplot <- function(srazka, vypar, odtok, ...) {
  plot(odtok, 
       ylim = c(-max(odtok), 
                2*max(odtok)), 
       yaxt = "n",
       xlab = "", 
       ylab = "", 
       ...)
  axis(2, 
       at = round(signif(seq(0, max(odtok), length = 5), 2)))
  abline(h = 0, lty = 3)
  par(new = TRUE)
  plot(x = time(srazka), 
       y = as.numeric(srazka), 
       col = "dodgerblue4", 
       type = "h",
       ylim = rev(c(0, 3*max(srazka))),
       xlab = "", 
       ylab = "", 
       axes = FALSE, ...)
  axis(4, 
       at = round(signif(seq(0, max(odtok), length = 5), 2)))
  par(new = TRUE)
  deltaet <- max(vypar) - min(vypar)
  plot(x = time(vypar), 
       y = as.numeric(vypar), col = "salmon1", type = "l",
       ylim = c(min(vypar), max(vypar) + 2.5*deltaet),
       xlab = "", 
       ylab = "", 
       axes = FALSE, ...)
  axis(4, 
       at = round(signif(seq(min(vypar), max(vypar), length = 5), 2), 1))
}

dframe <- ts(data = data.frame(P = 1:365, EP = 21:385,Q = 31:395), 
             start = c(2024, 1, 1), 
             frequency = 525960)
time(dframe)

hydroplot(srazka = dframe[, "P"], 
         vypar = dframe[, "EP"], 
         odtok = dframe[, "Q"], 
         xlim = as.Date(c("2001-09-01","2001-09-21")))
         title("rainfall, runoff and potential evaporation (mm/d)", 
               cex.main = 1.25, 
               font.main = 1)
```

## Autokorelační funkce

Slouží k posouzení, zda časová řada obsahuje cyklickou či periodickou složku a také, zda je či není řadou náhodných čísel. Graficky je vyjádřena pomocí *korelogramu*.

```{r, fig.cap="Vlevo řada se silnou autokorelací složek bez znatelené periodicity, vpravo dtto s periodickou složkou"}
par(mfrow = c(1, 2))
acf(dataset$R)
acf(co2)
```

## Pardého koeficienty 


```{r}

```


## Dekompozice časové řady

Dekompozicí časové řady rozumíme rozklad na složky:
  
  1. Trendovou $T_t$
  2. Sezónní $S_t$
  3. Cyklickou $C_t$
  4. Náhodnou $\epsilon_t$

### Aditivní dekompozice

Předpokládáme, že řadu lze rozložit na součet složek

$$
Y_t =T_t +S_t +C_t +\epsilon_t,
$$

```{r}
dec_co2 <- decompose(co2)
plot(dec_co2)
plot(dec_co2$trend)
```

### Residua

Ověřte, zda po dekompozici `co2` residua $\epsilon_t$ splňují definici *bílého šumu* 
tzn. mají nulovou střední hodnotu a konečný rozptyl a jsou nekorelované.

```{r}
shapiro.test(dec_co2$random)
mean(dec_co2$random, na.rm = TRUE)
var(dec_co2$random, na.rm = TRUE)
# ...
```

## Zhlazovací funkce

```{r}
par(mfrow = c(1, 2))
plot(dataset$Tmin, type = "l", 
     col = "slategray", 
     lwd = 0.5)
md1 <- loess(Tmin ~ na.omit(1:length(dataset$Tmin)), 
             data = dataset, 
             degree = 1)
lines(md1$fitted, col = "orangered")

plot(filter(x = dataset$R, 
             method = "convolution", 
             filter = c(rep(1/365.25, 365.25)), 
             sides = 1), 
      col = "dodgerblue3", 
     type = "l")
```

```{r}
md2 <- lm(Tmin ~ DTM, data = dataset)
plot(dataset$Tmin, type = "l", 
     col = "slategray", 
     lwd = 0.5)
lines(md1$fitted, col = "darkred")
abline(coef(md2), col = "orangered")

```






